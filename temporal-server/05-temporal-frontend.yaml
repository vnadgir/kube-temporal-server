apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/headless: "true"
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/name: temporal
    app.kubernetes.io/part-of: temporal
    app.kubernetes.io/version: 1.15.2
    prometheus.io/job: temporal-frontend
    prometheus.io/port: "9090"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
  name: temporal-frontend-headless
  namespace: temporal
spec:
  ports:
  - name: grpc-rpc
    port: 7233
    protocol: TCP
    targetPort: rpc
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: metrics
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/name: temporal
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/name: temporal
    app.kubernetes.io/part-of: temporal
    app.kubernetes.io/version: 1.15.2
  name: temporal-frontend
  namespace: temporal
spec:
  ports:
  - name: grpc-rpc
    port: 7233
    protocol: TCP
    targetPort: rpc
  selector:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/name: temporal
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/name: temporal
    app.kubernetes.io/part-of: temporal
    app.kubernetes.io/version: 1.15.2
  name: frontend
  namespace: temporal
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: temporal
      app.kubernetes.io/name: temporal
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: temporal
        app.kubernetes.io/name: temporal
        app.kubernetes.io/part-of: temporal
        app.kubernetes.io/version: 1.15.2
    spec:
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ENABLE_ES
        - name: ES_SEEDS
          value: elasticsearch-master-headless
        - name: ES_PORT
          value: "9200"
        - name: ES_VERSION
          value: v7
        - name: ES_SCHEME
          value: http
        - name: ES_VIS_INDEX
          value: temporal_visibility_v1_dev
        - name: ES_USER
        - name: ES_PWD
        - name: SERVICES
          value: frontend
        - name: TEMPORAL_STORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: temporal-default-store
        - name: TEMPORAL_VISIBILITY_STORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: temporal-visibility-store
        image: temporalio/server:1.15.2
        imagePullPolicy: IfNotPresent
        # command: ["/bin/sh"]
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 150
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: rpc
          timeoutSeconds: 1
        name: temporal-frontend
        ports:
        - containerPort: 7233
          name: rpc
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/temporal/config/config_template.yaml
          name: config
          subPath: config_template.yaml
        - mountPath: /etc/temporal/dynamic_config
          name: dynamic-config
      initContainers:
      - command:
        - sh
        - -c
        - until nslookup cassandra.temporal.svc.cluster.local; do echo
          waiting for cassandra service; echo "sleeping for a 1 second"; sleep 1; done;
        image: busybox
        imagePullPolicy: Always
        name: check-cassandra-service
      - command:
        - sh
        - -c
        - until cqlsh cassandra.temporal.svc.cluster.local 9042 -e "SHOW
          VERSION"; do echo waiting for cassandra to start; sleep 1; done;
        image: cassandra:3.11.3
        imagePullPolicy: IfNotPresent
        name: check-cassandra
      - command:
        - sh
        - -c
        - until cqlsh cassandra.temporal.svc.cluster.local 9042 -e "SELECT
          keyspace_name FROM system_schema.keyspaces" | grep temporal$; do echo waiting
          for default keyspace to become ready; sleep 1; done;
        image: cassandra:3.11.3
        imagePullPolicy: IfNotPresent
        name: check-cassandra-temporal-schema
      - command:
        - sh
        - -c
        - until cqlsh cassandra.temporal.svc.cluster.local 9042 -e "SELECT
          keyspace_name FROM system_schema.keyspaces" | grep temporal_visibility$;
          do echo waiting for visibility keyspace to become ready; sleep 1; done;
        image: cassandra:3.11.3
        imagePullPolicy: IfNotPresent
        name: check-cassandra-visibility-schema
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: temporal-frontend-config
        name: config
      - configMap:
          defaultMode: 420
          items:
          - key: dynamic_config.yaml
            path: dynamic_config.yaml
          name: temporal-dynamic-config
        name: dynamic-config
